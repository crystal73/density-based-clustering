import math
from sklearn import metrics
import pylab as pl
import csv
import linecache
import numpy as np
list3=['3','20','6','1','2','2','1','1','2']
#list3=['3','18','6','1','2','1','1','1','2']#probe
#list3=['3','15','8','1','2','1','1','1','2']#probe_50
#list3=['3','13','3','1','2','1','1','1','2']
def getPoints():
    csvfile=file(r'C:\Users\lenovo\Desktop\zspaper\reference\mix.csv','rb')
    #csvfile=file(r'C:\Users\lenovo\Desktop\zspaper\code\probe.csv','rb')
    #csvfile=file(r'C:\workplace\peak\train_probe.csv','rb')
    #csvfile=file(r'C:\workplace\peak\train_dos.csv','rb')
    f=csv.reader(csvfile)
    points = []
    origi_label=[]
    for line in f:
        points.append(line)
        origi_label.append(line[-1])
    return points,origi_label
    
def compare(i,point1,point2):
    point_1=point1[32:-1]
    point_2=point2[32:-1]
    if(point_1[i]==point_2[i]):
        return 0
    else:
        return 1

def getDistance3(point1,point2):
    point1_continuous=point1[0:32]
    point2_continuous=point2[0:32]
    point1_discrete=point1[32:-1]
    point2_discrete=point2[32:-1]
    result1=0.0
    for i in range(len(list3)):
        result1+=((compare(i,point1,point2)/float(list3[i]))**2)
    distance_discrete=(2.0*result1)**0.5
    result2=0.0
    for i in range(len(point1_continuous)):
        dis=(float(point1_continuous[i])-float(point2_continuous[i]))**2
        result2+=dis
    distance_continuous=result2**0.5
    distance=distance_discrete+distance_continuous
    return distance
    #return distance_discrete

def getAverDistance(points):
    sum=0
    for num_point1 in range(0,len(points)-1):
        for num_point2 in range(num_point1+1,len(points)):
            #distance=getDistance(points[num_point1],points[num_point2])
            distance=getDistance3(points[num_point1],points[num_point2])
            sum+=distance
        #print num_point1
        #print sum
    #print sum
    distancenum=len(points)*(len(points)-1)/2
    t2=sum/distancenum*6
    return t2

def ChooseDc(dc_percent,points,dis,distance):
    #avgNeighbourNum = dc_percent*len(points)
    maxd = 0
    for i in range(0,len(points)):
        for j in range(i+1,len(points)):
            pt1 = points[i]
            pt2 = points[j]
            #d = getDistance(pt1,pt2)
            d = getDistance3(pt1,pt2)
            #print d
            
            dis.append(d)
            distance[i,j] = d
            #dis.append(d)
            distance[j,i] = d
            if d>maxd:
                maxd = d
    dis_sorted=sorted(dis,reverse=1)
    print "choose_dc:",dis[int(round(len(dis_sorted)*0.02))]
    #return dis[int(avgNeighbourNum*len(points)*2)]
    return dis[int(round(len(dis_sorted)*0.02))]

def drawDecisionGraph(pl,rho, delta,cl,colorNum):
    cm = pl.get_cmap("RdYlGn")
    for i in range(len(rho)):
        pl.plot(rho[i], delta[i],'o',color=cm(cl[i]*1.0/colorNum))
    pl.xlabel(r'$\rho$')
    pl.ylabel(r'$\delta$')

def drawDecisionGraph2(pl,rho, delta,cl,colorNum):
    cm = pl.get_cmap("RdYlGn")
    for i in range(len(rho)):
        pl.plot(i, rho[i]*delta[i],'o',color=cm(cl[i]*1.0/colorNum))
    pl.xlabel(r'number')
    pl.ylabel(r'r')
    
def Canopy( ):
    points,origi_label=getPoints()
    center=[]
    cluster=[]
    t2=getAverDistance(points)
    print "t2:",t2
    Clusters=[]
    while len(points)!=0:       
        basePoint=points[len(points)-1]
        cluster=[]
        cluster.append(basePoint)
        points.remove(basePoint)
        points_copy=[points[num] for num in range(len(points))]
        for num_point in range(len(points_copy)):
            #dis=getDistance(points_copy[num_point],basePoint)
            dis=getDistance3(points_copy[num_point],basePoint)         
            if dis<=t2:
                cluster.append(points_copy[num_point])
                points[num_point]=0
                
        Clusters.append(cluster)
        while (0 in points):
            points.remove(0)
        
    print "k:",len(Clusters)
    return len(Clusters)

def Cluster(k):
    #=========Load Data=========
   
    points,origi_label=getPoints()
    #=========Calculating=========
        #-----choose dc-----
    dc_percent = 0.02
    dis = []
    distance = {}
    #dc=ChooseDc(dc_percent,points,dis,distance)
    distance_list=[]
    for i in range(0,len(points)):
        for j in range(i+1,len(points)):
            dij = getDistance3(points[i],points[j])
            distance_list.append(dij)
    print "std:",np.std(distance_list)
    #dc=np.std(distance_list)*1.06*(len(points)**(-0.2))
    dc=84.329854782043178
    #dc=float((len(points)**(float(-1)/45))*np.std(distance_list)*0.66*float((4.0/43)**(1.0/45)))**2
    #dc=(4.0**0.2)*np.std(distance_list)/((3.0*len(points))**0.2)
    ChooseDc(dc_percent,points,dis,distance)
    #dc=16.370549090910554
    #dc=10.4717316624606
    #dc=1.86133727849942493
    print("dc:"+str(dc))

    #-----cal rho:"Cut off" kernel
    ''' 
    rho = [0 for i in range(len(points))]
    for i in range(0,len(points)):
        for j in range(i+1,len(points)):
            #dij = getDistance(points[i],points[j])
            dij = getDistance3(points[i],points[j])
            if dij<dc:
                rho[i] += 1
                rho[j] += 1
    ''' 
        #-----cal rho:"Gaussian Kernel"
    rho = [0 for i in range(len(points))]
    for i in range(0,len(points)):
        for j in range(i+1,len(points)):
            #dij = getDistance(points[i],points[j])
            dij = getDistance3(points[i],points[j])
            rho[i] += math.exp(-(dij/dc)*(dij/dc))
            rho[j] += math.exp(-(dij/dc)*(dij/dc))
         
    rho_list =[(rho[i],i) for i in range(len(rho))]
    rho_sorted = sorted(rho_list, reverse=1)
    #print rho_sorted
    #raw_input()
    print("Highest rho:",rho_sorted[0])
    #print len(dis)
    #print dis[-1]
    dis_sorted=sorted(dis)
    maxd = dis_sorted[-1]
    print "maxd:",maxd
    #print dis[-1]
    #print "maxd:",maxd
    delta = [maxd for i in range(len(points))]
    nneigh = [-1 for i in range(len(points))]
    #unnormal_sum=0
    #delta_4=[]
    #nneigh_4=[]
    #id_4p1=[]
    for ii in range(1,len(rho_sorted)):
        for jj in range(0,ii):
            id_p1 = rho_sorted[ii][1] #get point1's id
            id_p2 = rho_sorted[jj][1] #get point2's id
            if (distance[id_p1,id_p2]<delta[id_p1]):
                delta[id_p1] = distance[id_p1,id_p2]
                nneigh[id_p1] = id_p2
    change_num=[]
    change_nneigh=[]
    for j in range(2000,len(nneigh)):
        if nneigh[j]<2000:
            change_nneigh.append(nneigh[j])
            nneigh[j]=2000
            change_num.append(j)
    print change_num
    print change_nneigh
    print "nneigh:",nneigh[2000:len(nneigh)]
    print "rho:",rho[2000:len(nneigh)]
    print "delta:",delta[2000:len(nneigh)]
    #print nneigh
    #raw_input()
#-----cal r:list biggest num
    r={}
    for i in range(0,len(rho_sorted)):
        point_num=rho_sorted[i][1]
              
        r[point_num]=float(rho_sorted[i][0]*delta[point_num])
    
    r_sorted=sorted(r.items(),key=lambda d:d[1],reverse=1)
    print "r:",r_sorted[0:50]
    rho1=[]
    delta1=[]
    for i in range(50):
        r_sorted_id=r_sorted[i][0]
        rho1.append(rho[r_sorted_id])
        delta1.append(delta[r_sorted_id])
    print "r_rho:",rho1
    print "r_delta",delta1
    
    #raw_input()
#-----remember change the nun of cluster,6=k-1
    rho_threlist=[]
    delta_threlist=[]
    for j in range(0,k):
        num=r_sorted[j][0]
        rho_threlist.append(rho[num])
        delta_threlist.append(delta[num])
    delta_threshold=min(delta_threlist)
    rho_threshold=min(rho_threlist)
    #num=r_sorted[k-1][0]
    #num=r_srted[0][1]
    #delta_threshold=delta[num]
    #rho_threshold=rho[num]
    
    #delta_sorted=sorted(delta,reverse=1)
    #delta_threshold1=delta_sorted[k-1]    
    #print "delta:",delta_sorted[0:50]
    #print "ori_delta:",delta_threshold1
    print "delta_threshold:",delta_threshold
    print "rho_threshold:",rho_threshold
        
    
    #assignment
    cl = [-1 for i in range(len(points))]
    colorNum = 0
    for ii in range(len(rho_sorted)):
        id_p = rho_sorted[ii][1]
        #print "id_p:",id_p
        #if (delta[id_p]>=delta_threshold and cl[id_p] == -1):
        if (delta[id_p]>=delta_threshold and rho[id_p]>=rho_threshold):
        #if (cl[id_p] == -1 and delta[id_p]>=5.683280031123668):
            cl[id_p] = colorNum
            colorNum += 1
        else:
            if (cl[id_p] == -1 and cl[nneigh[id_p]]!=-1):
                cl[id_p] = cl[nneigh[id_p]]
        #print "cl[id_p]:",cl[id_p]
    print "colorNum:",(colorNum)
    
#-----Clustering performance evaluation
    #-----count the num of each label which is after clustering
    #print "cl:",cl
    afcount_label={}
    for i in cl:
        if cl.count(i)>0:
            afcount_label[i]=cl.count(i)
    print afcount_label
    #-----get the biggest number of 'normal' in after dic
    afcount_label_sorted=sorted(afcount_label.items(),key=lambda d:d[1],reverse=1)
    afnum_normal=afcount_label_sorted[0][1]+len(change_num)
    afnum_unnormal=len(cl)-afnum_normal

    #-----count the num of each label which is before clustering
    oricount_label={}
    for i in origi_label:
        if origi_label.count(i)>0:
            oricount_label[i]=origi_label.count(i)
    print oricount_label
    #-----get the biggest number of 'normal' in original dic
    oricount_label_sorted=sorted(oricount_label.items(),key=lambda d:d[1],reverse=1)
    orinum_normal=oricount_label_sorted[0][1]
    orinum_unnormal=len(origi_label)-orinum_normal
    #-----get the index of 'normal' in original list
    orilabel_dic={}
    for i in range(len(origi_label)):
        orilabel_dic[i]=origi_label[i]
    
    orinormal_index=[]
    for k,v in orilabel_dic.iteritems():
        if v=='normal.':
            orinormal_index.append(k)
    #-----get the num of unnormal which is in after clustering however is normal in original
    afkey_normal=afcount_label_sorted[0][0]
    print "afkey_normal:",afkey_normal
    sum_wrong=0
    for i in range(len(orinormal_index)):
        if cl[orinormal_index[i]]!=afkey_normal:
            sum_wrong+=1
    print "sum_wrong:",sum_wrong
    erro_rate=float(sum_wrong)/float(orinum_normal)
    print "erro_rate:",erro_rate
    precision=(len(cl)-afnum_normal-sum_wrong)/float(len(origi_label)-orinum_normal)
    precision1=(len(cl)-afnum_normal-sum_wrong)/float(len(cl)-afnum_normal)
    recall=precision
    f1=precision1*recall*2/float(precision1+recall)
    #precision=float(50)/(len(cl)-afnum_normal)
    '''        
    precision=float(orinum_unnormal)/float(afnum_unnormal)
    if precision >1:
        precision=float(1)/precision
    '''
    print "precision:",precision1
    print "recall:",recall
    print "F1:",f1
    #fig1 = pl.figure(1)
    #pl.subplot(131)
    #drawOriginGraph(pl,points,cl,colorNum)
    #pl.subplot(121)
    #drawDecisionGraph(pl,rho,delta,cl,colorNum)
    #pl.subplot(122)
    #drawDecisionGraph2(pl,rho,delta,cl,colorNum)
    #pl.show()
    #d_value=precision-erro_rate
    return f1
    print
    
if __name__=="__main__":
    #k=Canopy()
    k=5
    precision=Cluster(k)
    dic={}
    dic[k]=precision
    print
    precision=Cluster(k-1)
    dic[k-1]=precision
    print
    k=k+1
    precision=Cluster(k)
    dic[k]=precision
    
    print dic
    print
    if (dic[k]>dic[k-1] and dic[k-2]>dic[k-1]):
        if (dic[k-2]>dic[k]):
            k=k-3
            while(Cluster(k)>dic[k+1]):
                print "k_decrease:",k
                dic[k]=Cluster(k)
                print dic
                k=k-1
            print
            print "the best result of k is:",k+1
            print "the evaluate is:",dic[k+1]
            Cluster(k+1)
        else:
            k=k+1
            while(Cluster(k)>dic[k-1]):
                print "k_increase:",k
                dic[k]=Cluster(k)
                print
                k=k+1
            print
            print "the best result of k is:",k-1
            print "the evaluate is:",dic[k-1]
            Cluster(k-1)
                
    elif (dic[k]<dic[k-1] and dic[k-2]<dic[k-1]):
        if (dic[k]>dic[k-2]):
            k=k+1
            while (Cluster(k)>dic[k-1]):
                print "k_increase:",k
                dic[k]=Cluster(k)
                print
                k=k+1
            print
            print "the best result of k is:",k-1
            print "the evaluate is:",dic[k-1]
            Cluster(k-1)
        else:
            k=k-3
            while(Cluster(k)>dic[k+1]):
                print "k_decrease:",k
                dic[k]=Cluster(k)
                print dic
                k=k-1
            print
            print "the best result of k is:",k+1
            print "the evaluate is:",dic[k+1]
            Cluster(k+1)
                
                


    elif dic[k]>dic[k-1]:
        print "increase"
        k=k+1
        while(Cluster(k)>dic[k-1]):
            print "k_increase:",k
            dic[k]=Cluster(k)
            print
            k=k+1
        print "the best result of k is:",k-1
        print "the evaluate is:",dic[k-1]
        Cluster(k-1)
       
    else:
        print "decrease"
        k=k-2
        #print k
        #print Cluster(k)
        #print dic[k+1]
        
        while(Cluster(k)>dic[k+1]):
            print "k_decrease:",k
            dic[k]=Cluster(k)
            print dic
            k=k-1
        print
        print "the best result of k is:",k+1
        print "the evaluate is:",dic[k+1]
        Cluster(k+1)





    
